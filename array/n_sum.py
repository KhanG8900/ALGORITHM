def sumClosure(a, b):
    return a + b


def compareClosure(a, b):
    if a < b:
        return -1
    elif a > b:
        return 1
    else:
        return 0


def otherCompareClosure(a, b):
    if a < b:
        return -1
    elif a > b:
        return 1
    else:
        return 0


class NSum:
    def __init__(self, **kv):
        self._sumClosure = kv.get('sumClosure', sumClosure)
        self._compareClosure = kv.get('compareClosure', compareClosure)

    def nSum(self, n, nums, target):
        if n == 2:
            results = self._twoSum(nums, target)
        else:
            results = set()
            prevNum = None
            for index, num in enumerate(nums):
                if prevNum is not None and \
                   self._compareClosure(prevNum, num) == 0:
                    continue
                prevNum = num
                nMinus1Results = self.nSum(n - 1,
                                           nums[index + 1:],
                                           target - num)
                nMinus1Results = self._appendNumToEachTuple(num,
                                                            nMinus1Results)
                results = results.union(nMinus1Results)
        return self._convertType(results)

    def _twoSum(self, nums, target):
        nums.sort()
        lt = 0
        rt = len(nums) - 1
        results = set()
        while lt < rt:
            sum_ = self._sumClosure(nums[lt], nums[rt])
            flag = self._compareClosure(sum_, target)
            if flag == -1:
                lt += 1
            elif flag == 1:
                rt -= 1
            else:
                results.add((nums[lt], nums[rt], ))
                lt += 1
                rt -= 1
                while (lt < len(nums) and
                       self._compareClosure(nums[lt - 1], nums[lt]) == 0):
                    lt += 1
                while (0 <= rt and
                       self._compareClosure(nums[rt], nums[rt + 1]) == 0):
                    rt -= 1
        return results

    def _appendNumToEachTuple(self, num, tps):
        results = set()
        for tp in tps:
            tp += (num, )
            tp = tuple(sorted(list(tp)))
            results.add(tp)
        return results

    def _convertType(self, results_set):
        results = []
        for result in results_set:
            results.append(sorted(list(result)))
        return sorted(results)


def main():
    data = [[[1, 0, -1, 0, -2, 2], 0],  # noqa: E501
            [[-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 1],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 2],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 3],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 4],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 5],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 6],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 7],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 8],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 9],  # noqa: E501
            [[7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 10]]  # noqa: E501
    expects = [[[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]],  # noqa: E501
               [[-7, -5, 6, 7], [-7, -4, 5, 7], [-7, -4, 6, 6], [-7, -3, 4, 7], [-7, -3, 5, 6], [-7, -2, 3, 7], [-7, -2, 4, 6], [-7, -1, 2, 7], [-7, -1, 3, 6], [-7, -1, 4, 5], [-7, 0, 1, 7], [-7, 0, 2, 6], [-7, 0, 3, 5], [-7, 0, 4, 4], [-7, 1, 2, 5], [-7, 1, 3, 4], [-6, -5, 5, 7], [-6, -5, 6, 6], [-6, -4, 4, 7], [-6, -4, 5, 6], [-6, -3, 3, 7], [-6, -3, 4, 6], [-6, -2, 2, 7], [-6, -2, 3, 6], [-6, -2, 4, 5], [-6, -1, 1, 7], [-6, -1, 2, 6], [-6, -1, 3, 5], [-6, -1, 4, 4], [-6, 0, 1, 6], [-6, 0, 2, 5], [-6, 0, 3, 4], [-6, 1, 2, 4], [-5, -4, 3, 7], [-5, -4, 4, 6], [-5, -3, 2, 7], [-5, -3, 3, 6], [-5, -3, 4, 5], [-5, -2, 1, 7], [-5, -2, 2, 6], [-5, -2, 3, 5], [-5, -2, 4, 4], [-5, -1, 0, 7], [-5, -1, 1, 6], [-5, -1, 2, 5], [-5, -1, 3, 4], [-5, 0, 1, 5], [-5, 0, 2, 4], [-5, 1, 2, 3], [-4, -3, 1, 7], [-4, -3, 2, 6], [-4, -3, 3, 5], [-4, -3, 4, 4], [-4, -2, 0, 7], [-4, -2, 1, 6], [-4, -2, 2, 5], [-4, -2, 3, 4], [-4, -1, 0, 6], [-4, -1, 1, 5], [-4, -1, 2, 4], [-4, 0, 1, 4], [-4, 0, 2, 3], [-3, -3, 0, 7], [-3, -3, 1, 6], [-3, -3, 2, 5], [-3, -3, 3, 4], [-3, -2, -1, 7], [-3, -2, 0, 6], [-3, -2, 1, 5], [-3, -2, 2, 4], [-3, -1, 0, 5], [-3, -1, 1, 4], [-3, -1, 2, 3], [-3, 0, 1, 3], [-2, -2, -1, 6], [-2, -2, 0, 5], [-2, -2, 1, 4], [-2, -2, 2, 3], [-2, -1, 0, 4], [-2, -1, 1, 3], [-2, 0, 1, 2]],  # noqa: E501
               [[-6, -5, 6, 7], [-6, -4, 5, 7], [-6, -4, 6, 6], [-6, -3, 4, 7], [-6, -3, 5, 6], [-6, -2, 3, 7], [-6, -2, 4, 6], [-6, -1, 2, 7], [-6, -1, 3, 6], [-6, -1, 4, 5], [-6, 0, 1, 7], [-6, 0, 2, 6], [-6, 0, 3, 5], [-6, 0, 4, 4], [-6, 1, 2, 5], [-6, 1, 3, 4], [-5, -4, 4, 7], [-5, -4, 5, 6], [-5, -3, 3, 7], [-5, -3, 4, 6], [-5, -2, 2, 7], [-5, -2, 3, 6], [-5, -2, 4, 5], [-5, -1, 1, 7], [-5, -1, 2, 6], [-5, -1, 3, 5], [-5, -1, 4, 4], [-5, 0, 1, 6], [-5, 0, 2, 5], [-5, 0, 3, 4], [-5, 1, 2, 4], [-4, -3, 2, 7], [-4, -3, 3, 6], [-4, -3, 4, 5], [-4, -2, 1, 7], [-4, -2, 2, 6], [-4, -2, 3, 5], [-4, -2, 4, 4], [-4, -1, 0, 7], [-4, -1, 1, 6], [-4, -1, 2, 5], [-4, -1, 3, 4], [-4, 0, 1, 5], [-4, 0, 2, 4], [-4, 1, 2, 3], [-3, -3, 1, 7], [-3, -3, 2, 6], [-3, -3, 3, 5], [-3, -3, 4, 4], [-3, -2, 0, 7], [-3, -2, 1, 6], [-3, -2, 2, 5], [-3, -2, 3, 4], [-3, -1, 0, 6], [-3, -1, 1, 5], [-3, -1, 2, 4], [-3, 0, 1, 4], [-3, 0, 2, 3], [-2, -2, -1, 7], [-2, -2, 0, 6], [-2, -2, 1, 5], [-2, -2, 2, 4], [-2, -1, 0, 5], [-2, -1, 1, 4], [-2, -1, 2, 3], [-2, 0, 1, 3], [-1, 0, 1, 2]],  # noqa: E501
               [[-6, -5, 7, 7], [-6, -4, 6, 7], [-6, -3, 5, 7], [-6, -3, 6, 6], [-6, -2, 4, 7], [-6, -2, 5, 6], [-6, -1, 3, 7], [-6, -1, 4, 6], [-6, 0, 2, 7], [-6, 0, 3, 6], [-6, 0, 4, 5], [-6, 1, 2, 6], [-6, 1, 3, 5], [-6, 1, 4, 4], [-6, 2, 3, 4], [-5, -4, 5, 7], [-5, -4, 6, 6], [-5, -3, 4, 7], [-5, -3, 5, 6], [-5, -2, 3, 7], [-5, -2, 4, 6], [-5, -1, 2, 7], [-5, -1, 3, 6], [-5, -1, 4, 5], [-5, 0, 1, 7], [-5, 0, 2, 6], [-5, 0, 3, 5], [-5, 0, 4, 4], [-5, 1, 2, 5], [-5, 1, 3, 4], [-4, -3, 3, 7], [-4, -3, 4, 6], [-4, -2, 2, 7], [-4, -2, 3, 6], [-4, -2, 4, 5], [-4, -1, 1, 7], [-4, -1, 2, 6], [-4, -1, 3, 5], [-4, -1, 4, 4], [-4, 0, 1, 6], [-4, 0, 2, 5], [-4, 0, 3, 4], [-4, 1, 2, 4], [-3, -3, 2, 7], [-3, -3, 3, 6], [-3, -3, 4, 5], [-3, -2, 1, 7], [-3, -2, 2, 6], [-3, -2, 3, 5], [-3, -2, 4, 4], [-3, -1, 0, 7], [-3, -1, 1, 6], [-3, -1, 2, 5], [-3, -1, 3, 4], [-3, 0, 1, 5], [-3, 0, 2, 4], [-3, 1, 2, 3], [-2, -2, 0, 7], [-2, -2, 1, 6], [-2, -2, 2, 5], [-2, -2, 3, 4], [-2, -1, 0, 6], [-2, -1, 1, 5], [-2, -1, 2, 4], [-2, 0, 1, 4], [-2, 0, 2, 3], [-1, 0, 1, 3]],  # noqa: E501
               [[-6, -4, 7, 7], [-6, -3, 6, 7], [-6, -2, 5, 7], [-6, -2, 6, 6], [-6, -1, 4, 7], [-6, -1, 5, 6], [-6, 0, 3, 7], [-6, 0, 4, 6], [-6, 1, 2, 7], [-6, 1, 3, 6], [-6, 1, 4, 5], [-6, 2, 3, 5], [-6, 2, 4, 4], [-5, -4, 6, 7], [-5, -3, 5, 7], [-5, -3, 6, 6], [-5, -2, 4, 7], [-5, -2, 5, 6], [-5, -1, 3, 7], [-5, -1, 4, 6], [-5, 0, 2, 7], [-5, 0, 3, 6], [-5, 0, 4, 5], [-5, 1, 2, 6], [-5, 1, 3, 5], [-5, 1, 4, 4], [-5, 2, 3, 4], [-4, -3, 4, 7], [-4, -3, 5, 6], [-4, -2, 3, 7], [-4, -2, 4, 6], [-4, -1, 2, 7], [-4, -1, 3, 6], [-4, -1, 4, 5], [-4, 0, 1, 7], [-4, 0, 2, 6], [-4, 0, 3, 5], [-4, 0, 4, 4], [-4, 1, 2, 5], [-4, 1, 3, 4], [-3, -3, 3, 7], [-3, -3, 4, 6], [-3, -2, 2, 7], [-3, -2, 3, 6], [-3, -2, 4, 5], [-3, -1, 1, 7], [-3, -1, 2, 6], [-3, -1, 3, 5], [-3, -1, 4, 4], [-3, 0, 1, 6], [-3, 0, 2, 5], [-3, 0, 3, 4], [-3, 1, 2, 4], [-2, -2, 1, 7], [-2, -2, 2, 6], [-2, -2, 3, 5], [-2, -2, 4, 4], [-2, -1, 0, 7], [-2, -1, 1, 6], [-2, -1, 2, 5], [-2, -1, 3, 4], [-2, 0, 1, 5], [-2, 0, 2, 4], [-2, 1, 2, 3], [-1, 0, 1, 4], [-1, 0, 2, 3]],  # noqa: E501
               [[-6, -3, 7, 7], [-6, -2, 6, 7], [-6, -1, 5, 7], [-6, -1, 6, 6], [-6, 0, 4, 7], [-6, 0, 5, 6], [-6, 1, 3, 7], [-6, 1, 4, 6], [-6, 2, 3, 6], [-6, 2, 4, 5], [-6, 3, 4, 4], [-5, -4, 7, 7], [-5, -3, 6, 7], [-5, -2, 5, 7], [-5, -2, 6, 6], [-5, -1, 4, 7], [-5, -1, 5, 6], [-5, 0, 3, 7], [-5, 0, 4, 6], [-5, 1, 2, 7], [-5, 1, 3, 6], [-5, 1, 4, 5], [-5, 2, 3, 5], [-5, 2, 4, 4], [-4, -3, 5, 7], [-4, -3, 6, 6], [-4, -2, 4, 7], [-4, -2, 5, 6], [-4, -1, 3, 7], [-4, -1, 4, 6], [-4, 0, 2, 7], [-4, 0, 3, 6], [-4, 0, 4, 5], [-4, 1, 2, 6], [-4, 1, 3, 5], [-4, 1, 4, 4], [-4, 2, 3, 4], [-3, -3, 4, 7], [-3, -3, 5, 6], [-3, -2, 3, 7], [-3, -2, 4, 6], [-3, -1, 2, 7], [-3, -1, 3, 6], [-3, -1, 4, 5], [-3, 0, 1, 7], [-3, 0, 2, 6], [-3, 0, 3, 5], [-3, 0, 4, 4], [-3, 1, 2, 5], [-3, 1, 3, 4], [-2, -2, 2, 7], [-2, -2, 3, 6], [-2, -2, 4, 5], [-2, -1, 1, 7], [-2, -1, 2, 6], [-2, -1, 3, 5], [-2, -1, 4, 4], [-2, 0, 1, 6], [-2, 0, 2, 5], [-2, 0, 3, 4], [-2, 1, 2, 4], [-1, 0, 1, 5], [-1, 0, 2, 4], [-1, 1, 2, 3]],  # noqa: E501
               [[-6, -2, 7, 7], [-6, -1, 6, 7], [-6, 0, 5, 7], [-6, 0, 6, 6], [-6, 1, 4, 7], [-6, 1, 5, 6], [-6, 2, 3, 7], [-6, 2, 4, 6], [-6, 3, 4, 5], [-5, -3, 7, 7], [-5, -2, 6, 7], [-5, -1, 5, 7], [-5, -1, 6, 6], [-5, 0, 4, 7], [-5, 0, 5, 6], [-5, 1, 3, 7], [-5, 1, 4, 6], [-5, 2, 3, 6], [-5, 2, 4, 5], [-5, 3, 4, 4], [-4, -3, 6, 7], [-4, -2, 5, 7], [-4, -2, 6, 6], [-4, -1, 4, 7], [-4, -1, 5, 6], [-4, 0, 3, 7], [-4, 0, 4, 6], [-4, 1, 2, 7], [-4, 1, 3, 6], [-4, 1, 4, 5], [-4, 2, 3, 5], [-4, 2, 4, 4], [-3, -3, 5, 7], [-3, -3, 6, 6], [-3, -2, 4, 7], [-3, -2, 5, 6], [-3, -1, 3, 7], [-3, -1, 4, 6], [-3, 0, 2, 7], [-3, 0, 3, 6], [-3, 0, 4, 5], [-3, 1, 2, 6], [-3, 1, 3, 5], [-3, 1, 4, 4], [-3, 2, 3, 4], [-2, -2, 3, 7], [-2, -2, 4, 6], [-2, -1, 2, 7], [-2, -1, 3, 6], [-2, -1, 4, 5], [-2, 0, 1, 7], [-2, 0, 2, 6], [-2, 0, 3, 5], [-2, 0, 4, 4], [-2, 1, 2, 5], [-2, 1, 3, 4], [-1, 0, 1, 6], [-1, 0, 2, 5], [-1, 0, 3, 4], [-1, 1, 2, 4], [0, 1, 2, 3]],  # noqa: E501
               [[-6, -1, 7, 7], [-6, 0, 6, 7], [-6, 1, 5, 7], [-6, 1, 6, 6], [-6, 2, 4, 7], [-6, 2, 5, 6], [-6, 3, 4, 6], [-6, 4, 4, 5], [-5, -2, 7, 7], [-5, -1, 6, 7], [-5, 0, 5, 7], [-5, 0, 6, 6], [-5, 1, 4, 7], [-5, 1, 5, 6], [-5, 2, 3, 7], [-5, 2, 4, 6], [-5, 3, 4, 5], [-4, -3, 7, 7], [-4, -2, 6, 7], [-4, -1, 5, 7], [-4, -1, 6, 6], [-4, 0, 4, 7], [-4, 0, 5, 6], [-4, 1, 3, 7], [-4, 1, 4, 6], [-4, 2, 3, 6], [-4, 2, 4, 5], [-4, 3, 4, 4], [-3, -3, 6, 7], [-3, -2, 5, 7], [-3, -2, 6, 6], [-3, -1, 4, 7], [-3, -1, 5, 6], [-3, 0, 3, 7], [-3, 0, 4, 6], [-3, 1, 2, 7], [-3, 1, 3, 6], [-3, 1, 4, 5], [-3, 2, 3, 5], [-3, 2, 4, 4], [-2, -2, 4, 7], [-2, -2, 5, 6], [-2, -1, 3, 7], [-2, -1, 4, 6], [-2, 0, 2, 7], [-2, 0, 3, 6], [-2, 0, 4, 5], [-2, 1, 2, 6], [-2, 1, 3, 5], [-2, 1, 4, 4], [-2, 2, 3, 4], [-1, 0, 1, 7], [-1, 0, 2, 6], [-1, 0, 3, 5], [-1, 0, 4, 4], [-1, 1, 2, 5], [-1, 1, 3, 4], [0, 1, 2, 4]],  # noqa: E501
               [[-6, 0, 7, 7], [-6, 1, 6, 7], [-6, 2, 5, 7], [-6, 2, 6, 6], [-6, 3, 4, 7], [-6, 3, 5, 6], [-6, 4, 4, 6], [-5, -1, 7, 7], [-5, 0, 6, 7], [-5, 1, 5, 7], [-5, 1, 6, 6], [-5, 2, 4, 7], [-5, 2, 5, 6], [-5, 3, 4, 6], [-5, 4, 4, 5], [-4, -2, 7, 7], [-4, -1, 6, 7], [-4, 0, 5, 7], [-4, 0, 6, 6], [-4, 1, 4, 7], [-4, 1, 5, 6], [-4, 2, 3, 7], [-4, 2, 4, 6], [-4, 3, 4, 5], [-3, -3, 7, 7], [-3, -2, 6, 7], [-3, -1, 5, 7], [-3, -1, 6, 6], [-3, 0, 4, 7], [-3, 0, 5, 6], [-3, 1, 3, 7], [-3, 1, 4, 6], [-3, 2, 3, 6], [-3, 2, 4, 5], [-3, 3, 4, 4], [-2, -2, 5, 7], [-2, -2, 6, 6], [-2, -1, 4, 7], [-2, -1, 5, 6], [-2, 0, 3, 7], [-2, 0, 4, 6], [-2, 1, 2, 7], [-2, 1, 3, 6], [-2, 1, 4, 5], [-2, 2, 3, 5], [-2, 2, 4, 4], [-1, 0, 2, 7], [-1, 0, 3, 6], [-1, 0, 4, 5], [-1, 1, 2, 6], [-1, 1, 3, 5], [-1, 1, 4, 4], [-1, 2, 3, 4], [0, 1, 2, 5], [0, 1, 3, 4]],  # noqa: E501
               [[-6, 1, 7, 7], [-6, 2, 6, 7], [-6, 3, 5, 7], [-6, 3, 6, 6], [-6, 4, 4, 7], [-6, 4, 5, 6], [-5, 0, 7, 7], [-5, 1, 6, 7], [-5, 2, 5, 7], [-5, 2, 6, 6], [-5, 3, 4, 7], [-5, 3, 5, 6], [-5, 4, 4, 6], [-4, -1, 7, 7], [-4, 0, 6, 7], [-4, 1, 5, 7], [-4, 1, 6, 6], [-4, 2, 4, 7], [-4, 2, 5, 6], [-4, 3, 4, 6], [-4, 4, 4, 5], [-3, -2, 7, 7], [-3, -1, 6, 7], [-3, 0, 5, 7], [-3, 0, 6, 6], [-3, 1, 4, 7], [-3, 1, 5, 6], [-3, 2, 3, 7], [-3, 2, 4, 6], [-3, 3, 4, 5], [-2, -2, 6, 7], [-2, -1, 5, 7], [-2, -1, 6, 6], [-2, 0, 4, 7], [-2, 0, 5, 6], [-2, 1, 3, 7], [-2, 1, 4, 6], [-2, 2, 3, 6], [-2, 2, 4, 5], [-2, 3, 4, 4], [-1, 0, 3, 7], [-1, 0, 4, 6], [-1, 1, 2, 7], [-1, 1, 3, 6], [-1, 1, 4, 5], [-1, 2, 3, 5], [-1, 2, 4, 4], [0, 1, 2, 6], [0, 1, 3, 5], [0, 1, 4, 4], [0, 2, 3, 4]],  # noqa: E501
               [[-6, 2, 7, 7], [-6, 3, 6, 7], [-6, 4, 5, 7], [-6, 4, 6, 6], [-5, 1, 7, 7], [-5, 2, 6, 7], [-5, 3, 5, 7], [-5, 3, 6, 6], [-5, 4, 4, 7], [-5, 4, 5, 6], [-4, 0, 7, 7], [-4, 1, 6, 7], [-4, 2, 5, 7], [-4, 2, 6, 6], [-4, 3, 4, 7], [-4, 3, 5, 6], [-4, 4, 4, 6], [-3, -1, 7, 7], [-3, 0, 6, 7], [-3, 1, 5, 7], [-3, 1, 6, 6], [-3, 2, 4, 7], [-3, 2, 5, 6], [-3, 3, 4, 6], [-3, 4, 4, 5], [-2, -2, 7, 7], [-2, -1, 6, 7], [-2, 0, 5, 7], [-2, 0, 6, 6], [-2, 1, 4, 7], [-2, 1, 5, 6], [-2, 2, 3, 7], [-2, 2, 4, 6], [-2, 3, 4, 5], [-1, 0, 4, 7], [-1, 0, 5, 6], [-1, 1, 3, 7], [-1, 1, 4, 6], [-1, 2, 3, 6], [-1, 2, 4, 5], [-1, 3, 4, 4], [0, 1, 2, 7], [0, 1, 3, 6], [0, 1, 4, 5], [0, 2, 3, 5], [0, 2, 4, 4], [1, 2, 3, 4]]]  # noqa: E501

    sol = NSum(compareClosure=otherCompareClosure)
    error = ""
    for index, (nums, target) in enumerate(data):
        nums.sort()
        actual = sol.nSum(4, nums, target)
        expect = expects[index]
        if expect != actual:
            error += ("nums: {0}\ntarget: {1}\nexpect: {2}\nactual: {3}"
                      .format(nums, target, expect, actual))
    assert error == "", error

if __name__ == "__main__":
    main()
